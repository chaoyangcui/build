# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/clang/clang.gni")
import("//build/config/python.gni")
import("//build/templates/common/copy.gni")

js_declaration_dir = "${root_out_dir}/js_declaration"

# Collect js declaration files.
#
# Variables:
#  sources:  source files to copy.
#  part_name: which part these files belongs to.
#
template("js_declaration") {
  assert(defined(invoker.part_name), "part_name must be defined.")
  assert(defined(invoker.sources), "sources must be defined.")
  forward_variables_from(invoker, [ "part_name" ])
  _declaration_target_name = "${target_name}__copy"
  copy(_declaration_target_name) {
    forward_variables_from(invoker,
                           [
                             "sources",
                             "deps",
                             "testonly",
                           ])
    assert(sources != [], "sources shouldn't be an empty list.")
    assert(part_name != "", "part_name shouldn't be an empty string.")
    outputs = [ "$js_declaration_dir/$part_name/{{source_file_part}}" ]
  }
  _gen_signature = false
  if (gen_sdk_interface_signature) {
    _gen_signature = true
  }
  _ace_sdk_signature_path = "//interface/js-sdk/" + part_name
  _ace_sdk_dst_path = root_out_dir + "/js_declaration/" + part_name
  action_with_pydeps(target_name) {
    script = "//build/ohos/ace/check_signature.py"
    deps = [ ":$_declaration_target_name" ]
    outputs = [ _ace_sdk_dst_path ]
    args = [
      "--input",
      rebase_path(_ace_sdk_dst_path, root_build_dir),
      "--signature-path",
      rebase_path(_ace_sdk_signature_path, root_build_dir),
    ]
    if (_gen_signature) {
      args += [ "--gen-signature" ]
    }
  }
}

template("gen_js_obj") {
  name = target_name
  action("gen_js_obj_" + name) {
    visibility = [ ":*" ]

    objcopy_tool = "${clang_base_path}/bin/llvm-objcopy"
    platform = "${current_os}_${current_cpu}"
    if (platform == "mingw_x86_64") {
      script =
          "//third_party/flutter/engine/flutter/sky/tools/objcopy_pc_mac.py"
    } else if (platform == "mac_x64") {
      script =
          "//third_party/flutter/engine/flutter/sky/tools/objcopy_pc_mac.py"
    } else if (target_cpu == "x86_64") {
      script = "//third_party/flutter/engine/flutter/sky/tools/objcopy.py"
    } else if (target_cpu == "arm" || target_cpu == "arm64") {
      script = "//third_party/flutter/engine/flutter/sky/tools/objcopy.py"
    }

    args = [
      "--objcopy",
      rebase_path(objcopy_tool),
      "--input",
      rebase_path(invoker.input),
      "--output",
      rebase_path(invoker.output),
      "--arch",
      current_cpu,
    ]

    deps = []
    if (defined(invoker.dep)) {
        deps += [ invoker.dep ]
    }

    inputs = [ invoker.input ]
    outputs = [ invoker.output ]
  }

  source_set(name) {
    sources = [ invoker.output ]
    deps = [ ":gen_js_obj_" + name ]
  }
}
